AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation template

Resources:
  OneTP:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: OneTP
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "test-user"}'
        GenerateStringKey: "password"
        PasswordLength: 8
        ExcludeCharacters: '@/\'

  # S3 group
  S3Group:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: S3Group

  # EC2 group
  EC2Group:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: EC2Group

  # S3 read access policy with S3 and EC2 group attached
  S3ReadAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: S3ReadAccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource: "*"
      Groups:
        - !Ref S3Group
        - !Ref EC2Group

  # User 1 in s3 group with autogenerated password and a password reset on first login.
  IAMjesse:
    Type: AWS::IAM::User
    Properties:
      UserName: "jesse"
      Groups:
        - !Ref S3Group
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${OneTP}::password}}"
        PasswordResetRequired: true

  # User 2 in ec2 group with autogenerated password and a password reset on first login
  IAMjames:
    Type: AWS::IAM::User
    Properties:
      UserName: "james"
      Groups:
        - !Ref EC2Group
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${OneTP}::password}}"
        PasswordResetRequired: true

  # Parameter Store to store user 1 email
  jesseEmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user/emails/jesse"
      Type: String
      Value: "jesse@example.com"
      Description: "Email address for User 1"

  # Parameter Store to store user 2 email
  jamesEmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user/emails/james"
      Type: String
      Value: "james@example.com"
      Description: "Email address for User 2"


  # EventBridge Rule to detect new IAM user creation
  UserCreationEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Rule to detect new IAM user creation
      EventPattern:
        source:
          - "aws.iam"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - "CreateUser"
      Targets:
        - Arn: !GetAtt PrintUserPasswordLambda.Arn
          Id: "NotifyUserLambdaFunction"

  # Lambda Function to print user email and password
  PrintUserPasswordLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              ssm = boto3.client('ssm')
              for record in event['Records']:
                  user_name = record['detail']['userName']
                  email_param = f"/user/emails/{user_name.lower()}"
                  email = ssm.get_parameter(Name=email_param, WithDecryption=False)['Parameter']['Value']
                  print(f"User Email: {email}")
      Runtime: python3.12
      Timeout: 10

  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaUserAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                  - "ssm:GetParameter"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"

# Outputs:
#   jesseDetails:
#     Description: "Email and Password of User 1"
#     Value: !Sub "Email: {{resolve:ssm:/user/emails/jesse}}"

#   jamesDetails:
#     Description: "Email and Password of User 2"
#     Value: !Sub "Email: {{resolve:ssm:/user/emails/james}}"